@article{bezanson2017julia,
  title     = {Julia: {{A}} Fresh Approach to Numerical Computing},
  author    = {Bezanson, Jeff and Edelman, Alan and Karpinski, Stefan and Shah, Viral B},
  year      = {2017},
  volume    = {59},
  pages     = {65--98},
  publisher = {{SIAM}},
  file      = {/Users/storopoli/Zotero/storage/EJVUVH4R/Bezanson et al. - 2017 - Julia A fresh approach to numerical computing.pdf},
  journal   = {SIAM review},
  number    = {1}
}

@article{chen2014big,
  title     = {Big data: A survey},
  author    = {Chen, Min and Mao, Shiwen and Liu, Yunhao},
  journal   = {Mobile networks and applications},
  volume    = {19},
  number    = {2},
  pages     = {171--209},
  year      = {2014},
  publisher = {Springer}
}

@article{chenRobustBenchmarkingNoisy2016,
  title         = {Robust Benchmarking in Noisy Environments},
  author        = {Chen, Jiahao and Revels, Jarrett},
  year          = {2016},
  month         = aug,
  abstract      = {We propose a benchmarking strategy that is robust in the presence of timer error, OS jitter and other environmental fluctuations, and is insensitive to the highly nonideal statistics produced by timing measurements. We construct a model that explains how these strongly nonideal statistics can arise from environmental fluctuations, and also justifies our proposed strategy. We implement this strategy in the BenchmarkTools Julia package, where it is used in production continuous integration (CI) pipelines for developing the Julia language and its ecosystem.},
  archiveprefix = {arXiv},
  eprint        = {1608.04295},
  eprinttype    = {arxiv},
  file          = {/Users/storopoli/Zotero/storage/GT9PWYQP/Chen and Revels - 2016 - Robust benchmarking in noisy environments.pdf;/Users/storopoli/Zotero/storage/XCKCXUY7/1608.html},
  journal       = {arXiv:1608.04295 [cs]},
  keywords      = {68N30,B.8.1,Computer Science - Performance,D.2.5},
  primaryclass  = {cs}
}

@misc{domo2018data,
  title  = {Data Never Sleeps 6.0},
  author = {Domo},
  url    = {https://www.domo.com/assets/downloads/18_domo_data-never-sleeps-6+verticals.pdf},
  year   = {2018}
}

@article{fitzgerald2020idc,
  title   = {IDC FutureScape: Worldwide Digital Transformation 2021 Predictions},
  author  = {Fitzgerald, S and Jimenez, D. Z. and Findling S. and Yorifuji, Y. and Kumar, M. and Wu, L. and Carosella, G. and Ng, S and Parker, R. Carter, P. and Whalen, M.},
  journal = {IDC FutureScape},
  year    = {2020}
}

@article{gantz2012digital,
  title   = {The digital universe in 2020: Big data, bigger digital shadows, and biggest growth in the far east},
  author  = {Gantz, John and Reinsel, David},
  journal = {IDC iView: IDC Analyze the future},
  volume  = {2007},
  number  = {2012},
  pages   = {1--16},
  year    = {2012}
}

@misc{johnmyleswhiteJuliaDataDataFramesJl2020,
  title        = {{{JuliaData}}/{{DataFrames}}.Jl: V0.22.1},
  shorttitle   = {{{JuliaData}}/{{DataFrames}}.Jl},
  author       = {John Myles White and Bogumi{\l} Kami{\'n}ski and {powerdistribution} and {Milan Bouchet-Valat} and Sean Garborg and Jacob Quinn and Simon Kornblith and {cjprybol} and Alexey Stukalov and Douglas Bates and Tom Short and Chris DuBois and Harlan Harris and Kevin Squire and Alex Arslan and {pdeffebach} and David Anthoff and Dave Kleinschmidt and Andreas Noack and Viral B. Shah and Alex Mellnik and Takafumi Arakaki and Tanmay Mohapatra and Peter and Stefan Karpinski and Dahua Lin and {timema} and ExpandingMan and Florian Oswald and Lyndon White},
  year         = {2020},
  month        = nov,
  doi          = {10.5281/zenodo.4282946},
  abstract     = {DataFrames v0.22.1 Diff since v0.22.0 Closed issues: eltype width taken into accounet in display even if it is not shown (\#2540) Final ellipsis appears on next row (\#2544) clarify the interface for crossjoin when makeunique=true (\#2545) Two small typos in docs (\#2550) Merged pull requests: Fix size of float columns without eltypes (\#2542) (@ronisbr) Spaces after commas (\#2546) (@kescobo) Optional args style (\#2547) (@kescobo) Zero after decimal (\#2548) (@kescobo) issue \#2550 fix two small typos in docs (\#2551) (@roualdes) Switch from travis to GitHub Actions for CI testing (\#2552) (@quinnj) error when using one dimension for indexing (\#2553) (@bkamins) Add link to CI status badge (\#2555) (@nalimilan)},
  file         = {/Users/storopoli/Zotero/storage/W54ZZW99/4282946.html},
  howpublished = {Zenodo}
}

@article{khan2014big,
  title     = {Big data: survey, technologies, opportunities, and challenges},
  author    = {Khan, Nawsher and Yaqoob, Ibrar and Hashem, Ibrahim Abaker Targio and Inayat, Zakira and Mahmoud Ali, Waleed Kamaleldin and Alam, Muhammad and Shiraz, Muhammad and Gani, Abdullah},
  journal   = {The scientific world journal},
  volume    = {2014},
  year      = {2014},
  publisher = {Hindawi}
}

@book{lauwensThinkJuliaHow2019,
  title      = {Think {{Julia}}: {{How}} to {{Think Like}} a {{Computer Scientist}}},
  shorttitle = {Think {{Julia}}},
  author     = {Lauwens, Ben and Downey, Allen B.},
  year       = {2019},
  month      = may,
  edition    = {1st edition},
  publisher  = {{O'Reilly Media}},
  address    = {{Beijing ; Sebastopol, CA}},
  abstract   = {If you're just learning how to program, Julia is an excellent JIT-compiled, dynamically typed language with a clean syntax. This hands-on guide uses Julia 1.0 to walk you through programming one step at a time, beginning with basic programming concepts before moving on to more advanced capabilities, such as creating new types and multiple dispatch.Designed from the beginning for high performance, Julia is a general-purpose language ideal for not only numerical analysis and computational science but also web programming and scripting. Through exercises in each chapter, you'll try out programming concepts as you learn them. Think Julia is perfect for students at the high school or college level as well as self-learners and professionals who need to learn programming basics.Start with the basics, including language syntax and semanticsGet a clear definition of each programming conceptLearn about values, variables, statements, functions, and data structures in a logical progressionDiscover how to work with files and databasesUnderstand types, methods, and multiple dispatchUse debugging techniques to fix syntax, runtime, and semantic errorsExplore interface design and data structures through case studies},
  isbn       = {978-1-4920-4503-8},
  language   = {English}
}


@article{Meng2019Data,
  journal = {Harvard Data Science Review},
  doi     = {10.1162/99608f92.ba20f892},
  number  = {1},
  note    = {https://hdsr.mitpress.mit.edu/pub/jhy4g6eg},
  title   = {Data Science: An Artificial Ecosystem},
  url     = {https://hdsr.mitpress.mit.edu/pub/jhy4g6eg},
  volume  = {1},
  author  = {Meng, Xiao-Li},
  date    = {2019-07-01},
  year    = {2019},
  month   = {7},
  day     = {1}
}

@article{perkelJuliaComeSyntax2019,
  title      = {Julia: Come for the Syntax, Stay for the Speed},
  shorttitle = {Julia},
  author     = {Perkel, Jeffrey M.},
  year       = {2019},
  month      = jul,
  volume     = {572},
  pages      = {141--142},
  publisher  = {{Nature Publishing Group}},
  doi        = {10.1038/d41586-019-02310-3},
  abstract   = {Researchers often find themselves coding algorithms in one programming language, only to have to rewrite them in a faster one. An up-and-coming language could be the answer.},
  copyright  = {2021 Nature},
  file       = {/Users/storopoli/Zotero/storage/AEI87LGV/Perkel - 2019 - Julia come for the syntax, stay for the speed.pdf;/Users/storopoli/Zotero/storage/6HPANDX9/d41586-019-02310-3.html},
  journal    = {Nature},
  language   = {en},
  number     = {7767}
}

@book{senguptaJuliaHighPerformance2019,
  title      = {Julia {{High Performance}}: {{Optimizations}}, Distributed Computing, Multithreading, and {{GPU}} Programming with {{Julia}} 1.0 and beyond, 2nd {{Edition}}},
  shorttitle = {Julia {{High Performance}}},
  author     = {Sengupta, Avik and Edelman, Alan},
  year       = {2019},
  month      = jun,
  publisher  = {{Packt Publishing}},
  abstract   = {Design and develop high-performance programs in Julia 1.0 Key Features  Learn the characteristics of high-performance Julia code  Use the power of the GPU to write efficient numerical code  Speed up your computation with the help of newly introduced shared memory multi-threading in Julia 1.0   Book Description Julia is a high-level, high-performance dynamic programming language for numerical computing. If you want to understand how to avoid bottlenecks and design your programs for the highest possible performance, then this book is for you.  The book starts with how Julia uses type information to achieve its performance goals, and how to use multiple dispatches to help the compiler emit high-performance machine code. After that, you will learn how to analyze Julia programs and identify issues with time and memory consumption. We teach you how to use Julia's typing facilities accurately to write high-performance code and describe how the Julia compiler uses type information to create fast machine code. Moving ahead, you'll master design constraints and learn how to use the power of the GPU in your Julia code and compile Julia code directly to the GPU. Then, you'll learn how tasks and asynchronous IO help you create responsive programs and how to use shared memory multithreading in Julia. Toward the end, you will get a flavor of Julia's distributed computing capabilities and how to run Julia programs on a large distributed cluster.  By the end of this book, you will have the ability to build large-scale, high-performance Julia applications, design systems with a focus on speed, and improve the performance of existing programs. What you will learn  Understand how Julia code is transformed into machine code  Measure the time and memory taken by Julia programs  Create fast machine code using Julia's type information  Define and call functions without compromising Julia's performance  Accelerate your code via the GPU  Use tasks and asynchronous IO for responsive programs  Run Julia programs on large distributed clusters Who this book is for This book is for beginners and intermediate Julia programmers who are interested in high-performance technical programming. A basic knowledge of Julia programming is assumed.Table of Contents  Julia is Fast Analyzing Performance Type, Type Inference, and Stability Making Fast Function Calls Fast Numbers Using Arrays Accelerating code with the GPU Concurrent programming with Tasks Threads Distributed Computing with Julia},
  isbn       = {978-1-78829-811-7},
  language   = {English}
}

@misc{simonJuliaPlotsMakieJl2021,
  title        = {{{JuliaPlots}}/{{Makie}}.Jl: V0.14.1},
  shorttitle   = {{{JuliaPlots}}/{{Makie}}.Jl},
  author       = {Simon and {jkrumbiegel} and Singhvi, Anshul and Wang, Anthony and Freyer, Frederic and Vertechi, Pietro and Holy, Tim and Borregaard, Michael Krabbe and Datseris, George and M, Mustafa and Greimel, Fabian and Butterworth, Ian and Foster, Chris and Dehaybe, Henri and Schauer, Moritz and Kilpatrick, Logan and Byrne, Simon and Widmann, David and {kragol} and Weidner, Jan and Sharma, Arsh and {Micluța-C{\^a}mpeanu}, Sebastian and Hatherly, Michael and Herikstad, Roger and Goretkin, Gustavo and TagBot, Julia and {\v S}tih, Vilim and {smldis} and Ponet, Louis},
  year         = {2021},
  month        = jun,
  doi          = {10.5281/zenodo.4983497},
  abstract     = {Makie v0.14.1 Diff since v0.14.0 Closed issues: Heatmaps saved as pdf and svg are always interpolated using CairoMakie (\#1052) If Y axis is reversed, text in data space is drawn upside down (\#1054) Merged pull requests: added reference to beautiful makie gallery (\#1050) (@lazarusA) Remove deprecated MakieLayout from tutorial. (\#1053) (@Datseris) jk/menu auto direction (\#1057) (@jkrumbiegel)},
  file         = {/Users/storopoli/Zotero/storage/NQMW89YU/4983497.html},
  howpublished = {Zenodo}
}

@misc{storopoli2021bayesianjulia,
  author = {Storopoli, Jose},
  title  = {Bayesian Statistics with Julia and Turing},
  url    = {https://storopoli.io/Bayesian-Julia},
  year   = {2021}
}

@misc{tanmaybakshiBakingKnowledgeMachine2021,
  title    = {Baking {{Knowledge}} into {{Machine Learning Models}}\textemdash{{Chris Rackauckas}} on {{TechLifeSkills}} w/ {{Tanmay Ep}}.55},
  author   = {{tanmay bakshi}},
  year     = {2021},
  month    = apr,
  abstract = {In this episode of Tech Life Skills with Tanmay, we're joined by Chris Rackauckas, Applied Mathematics Instructor at MIT, Director of Scientific Research at PUMAS-AI, and Lead Developer for the SciML Open Source Scientific Computing community. Chris takes us into a deep dive of the world of scientific machine learning, including how we can bake existing mathematical knowledge into neural networks to make them more reliable, data efficient, and capable. With the power of this technology in easy to use packages like JuliaSim, simulations can be done up to 500x faster, enabling new possibilities that were previously unthinkable. Links: Episode with the CEO and CTO of Julia Computing: https://www.google.com/url?sa=t\&rct=j... Papers: https://arxiv.org/abs/2001.04385 https://arxiv.org/abs/2103.15341 https://arxiv.org/abs/2010.04004 https://arxiv.org/abs/2103.05244 Twitter: https://twitter.com/tajymany Instagram: https://www.instagram.com/tajymany/?h... Facebook: https://www.facebook.com/Tajymany/ LinkedIn: https://ca.linkedin.com/in/tanmay-bak... Email: TechLifeSkillsTanmay@gmail.com To Get a Hold of My Books (Hello Swift, Cognitive Computing with IBM Watson, Tanmay Teaches Julia): tanmaybakshi.com/Books.html Ready for pre-order (releasing Spring 2021), my new book "Tanmay Teaches Go": https://www.amazon.ca/Tanmay-Teaches-...},
  url      = {https://youtu.be/moyPIhvw4Nk}
}

@misc{tedxtalksProgrammingLanguageHeal2020,
  title      = {A Programming Language to Heal the Planet Together: {{Julia}}  | {{Alan Edelman}} | {{TEDxMIT}}},
  shorttitle = {A Programming Language to Heal the Planet Together},
  author     = {{TEDx Talks}},
  year       = {2020},
  month      = feb,
  abstract   = {40,334 views \textbullet{} Feb 14, 2020 \textbullet{} Even as the climate is warming, there is so little we know about it today. Computational modeling is how climate scientists reconcile our understanding of climate with what we observe. Traditionally, these models would have been written in Fortran, but today's climate emergency needs tools that are significantly easier to work with. Julia was built for this purpose and makes it easy for everybody focused on solving the problem to work together effectively. No more silos; we must now be part of an interconnected world.  Professor of @MIT Math, member of @MIT\_CSAIL and MIT Computational Science \&amp; Engineering. This talk was given at a TEDx event using the TED conference format but independently organized by a local community. Learn more at https://www.ted.com/tedx                   Show less                   Show more},
  url        = {https://youtu.be/qGW0GT1rCvs}
}

@misc{thejuliaprogramminglanguageJuliaCon2019Unreasonable2019,
  title    = {{{JuliaCon}} 2019 | {{The Unreasonable Effectiveness}} of {{Multiple Dispatch}} | {{Stefan Karpinski}}},
  author   = {{The Julia Programming Language}},
  year     = {2019},
  month    = jul,
  abstract = {30,599 views \textbullet{} Streamed live on Jul 25, 2019 \textbullet{} If you're familiar with Julia and its ecosystem, you may have noticed something lovely but a bit puzzling: there seems to be an unusually large amount of code reuse between packages compared to other seemingly similar languages. This sharing of code comes in two forms: 1. Sharing basic types among a wide variety of packages providing disparate functionality; 2. Sharing generic algorithms that work on various implementations of common abstractions. Why does generic code in Julia "just work"? Why do Julia packages seem to share types with so little friction? Both kinds of reuse are supposed to be natural benefits of class-based object-oriented languages. After all, inheritance and encapsulation are two of the four pillars of OOP. Even more puzzling is that Julia has no encapsulation and doesn't allow inheriting from concrete types at all. Yet both kinds of code reuse are rampant. What is going on? In this talk, I make the case that both of kinds sharing stem directly from Julia's multiple dispatch programming paradigm.                   Show less                   Show more},
  url      = {https://youtu.be/kc9HwsxE1OY}
}

@misc{tombreloffJuliaPlotsPlotsJl2021,
  title        = {{{JuliaPlots}}/{{Plots}}.Jl: V1.13.2},
  shorttitle   = {{{JuliaPlots}}/{{Plots}}.Jl},
  author       = {Tom Breloff and Daniel Schwabeneder and Michael Krabbe Borregaard and Simon Christ and Josef Heinen and Yuval and Andrew Palugniok and Simon and Pietro Vertechi and Zhanibek and Thatcher Chamberlin and {ma-laforge} and Christopher Rackauckas and Oliver Schulz and Sebastian Pfitzner and Takafumi Arakaki and Amin Yahyaabadi and Jack Devine and Sebastian Pech and Patrick Kofod Mogensen and Samuel S. Watson},
  year         = {2021},
  month        = apr,
  doi          = {10.5281/zenodo.4725318},
  abstract     = {Plots v1.13.2 Diff since v1.13.1 Closed issues: [BUG] savefig adds white lines (\#3457)},
  file         = {/Users/storopoli/Zotero/storage/DJJTX5N9/4725318.html},
  howpublished = {Zenodo}
}

@article{wickham2011split,
  title={The split-apply-combine strategy for data analysis},
  author={Wickham, Hadley},
  journal={Journal of statistical software},
  volume={40},
  number={1},
  pages={1--29},
  year={2011}
}
